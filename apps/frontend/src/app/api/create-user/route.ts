import { NextRequest, NextResponse } from 'next/server';
export const dynamic = 'force-dynamic';
export const revalidate = 0;
import { getAuthenticatedSession } from '@/lib/supabase-server';

export async function GET(request: NextRequest) {
  try {
    console.log('=== TESTE DE CRIA√á√ÉO DE USU√ÅRIO ===');
    
    const authResult = await getAuthenticatedSession();
    
    if (!authResult) {
      return NextResponse.json({ error: 'N√£o autorizado' }, { status: 401 });
    }
    
    const { supabase, session, user } = authResult;
    const userId = user.id;
    
  console.log('‚úÖ Usu√°rio autenticado:', {
      id: userId,
      email: user.email,
      name: user.user_metadata?.name || user.email
    });
    
    // Verificar se usu√°rio j√° existe
    const { data: existingUser, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (userError && userError.code !== 'PGRST116') {
      console.error('‚ùå Erro ao verificar usu√°rio:', userError);
      return NextResponse.json({
        error: 'Erro ao verificar usu√°rio',
        details: userError.message
      }, { status: 500 });
    }
    
    if (existingUser) {
      console.log('‚úÖ Usu√°rio j√° existe:', existingUser);
      return NextResponse.json({
        success: true,
        message: 'Usu√°rio j√° existe',
        user: existingUser
      });
    }
    
    // Criar usu√°rio
    console.log('üîÑ Criando usu√°rio...');
    const newUser = {
      id: userId,
      email: user.email!,
      name: user.user_metadata?.name || user.email!.split('@')[0],
      is_doctor: true,
      subscription_type: 'FREE'
    };
    
    const { data: createdUser, error: createError } = await supabase
      .from('users')
      .insert(newUser)
      .select()
      .single();
    
    if (createError) {
      console.error('‚ùå Erro ao criar usu√°rio:', createError);
      return NextResponse.json({
        error: 'Erro ao criar usu√°rio',
        details: createError.message,
        code: createError.code
      }, { status: 500 });
    }
    
    console.log('‚úÖ Usu√°rio criado:', createdUser);
    
    return NextResponse.json({
      success: true,
      message: 'Usu√°rio criado com sucesso',
      user: createdUser
    });
    
  } catch (error: unknown) {
    const message = error instanceof Error ? error.message : String(error);
    console.error('‚ùå Erro geral:', message);
    return NextResponse.json({
      error: 'Erro interno do servidor',
      details: message
    }, { status: 500 });
  }
}
