/**
 * Servi√ßo de Gera√ß√£o de Sugest√µes de IA para Consultas M√©dicas
 * Analisa contexto da conversa e gera sugest√µes inteligentes baseadas em protocolos m√©dicos
 */

import { EventEmitter } from 'events';
import { db } from '../config/database';
import { makeChatCompletion, makeEmbedding } from '../config/providers';
import { PromptTemplate, PROMPT_CONFIG } from '../prompts/medical-prompts';
import { randomUUID } from 'crypto';

export interface ContextAnalysis {
  phase: 'anamnese' | 'exame_fisico' | 'diagnostico' | 'tratamento' | 'encerramento';
  symptoms: string[];
  urgency_level: 'baixa' | 'media' | 'alta' | 'critica';
  next_steps: string[];
  missing_info: string[];
  patient_concerns: string[];
  doctor_questions_asked: string[];
  clinical_notes: string;
}

export interface AISuggestion {
  id: string;
  session_id: string;
  utterance_id?: string;
  type: 'question' | 'protocol' | 'alert' | 'followup' | 'assessment' | 'insight' | 'warning';
  content: string;
  source?: string;
  source_section?: string;
  confidence: number;
  priority: 'low' | 'medium' | 'high' | 'critical';
  used: boolean;
  used_at?: string;
  used_by?: string;
  rag_context?: any;
  created_at: string;
}

export interface SuggestionGenerationResult {
  suggestions: AISuggestion[];
  clinical_insights: string[];
  red_flags: string[];
  context_analysis: ContextAnalysis;
}

export interface ConversationContext {
  sessionId: string;
  patientName: string;
  patientAge?: string;
  patientGender?: string;
  sessionDuration: number;
  consultationType: string;
  utterances: any[];
  specialty?: string;
}

class SuggestionService extends EventEmitter {
  private isEnabled: boolean = false;
  private contextCache: Map<string, ContextAnalysis> = new Map();
  private suggestionHistory: Map<string, AISuggestion[]> = new Map();
  private lastSuggestionTime: Map<string, number> = new Map();
  
  // Configura√ß√µes
  private readonly MIN_SUGGESTION_INTERVAL = 10000; // 10 segundos entre sugest√µes
  private readonly MAX_SUGGESTIONS_PER_SESSION = 20;
  private readonly CONTEXT_WINDOW_SIZE = 10; // √öltimas 10 utterances
  private readonly CONFIDENCE_THRESHOLD = 0.7;

  constructor() {
    super();
    this.checkServiceAvailability();
  }

  private checkServiceAvailability(): void {
    const hasOpenAI = process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY.length > 0;
    
    if (hasOpenAI) {
      this.isEnabled = true;
      console.log('‚úÖ AI Suggestion Service habilitado');
    } else {
      console.warn('‚ö†Ô∏è AI Suggestion Service desabilitado - Configure OPENAI_API_KEY');
      this.isEnabled = false;
    }
  }

  /**
   * Gera sugest√µes de IA baseadas no contexto da conversa
   */
  public async generateSuggestions(context: ConversationContext): Promise<SuggestionGenerationResult | null> {
    if (!this.isEnabled) {
      console.log('üîá AI Suggestion Service desabilitado - usando sugest√µes mock');
      return this.generateMockSuggestions(context);
    }

    try {
      // Verificar se √© muito cedo para gerar nova sugest√£o
      const lastTime = this.lastSuggestionTime.get(context.sessionId) || 0;
      const now = Date.now();
      if (now - lastTime < this.MIN_SUGGESTION_INTERVAL) {
        console.log('‚è±Ô∏è Muito cedo para gerar nova sugest√£o');
        return null;
      }

      // Verificar limite de sugest√µes por sess√£o
      const existingSuggestions = this.suggestionHistory.get(context.sessionId) || [];
      if (existingSuggestions.length >= this.MAX_SUGGESTIONS_PER_SESSION) {
        console.log('üìä Limite de sugest√µes atingido para esta sess√£o');
        return null;
      }

      console.log(`ü§ñ Gerando sugest√µes para sess√£o ${context.sessionId}`);

      // 1. Analisar contexto da conversa
      const contextAnalysis = await this.analyzeContext(context);
      
      // 2. Buscar protocolos m√©dicos relevantes
      const relevantProtocols = await this.findRelevantProtocols(contextAnalysis);
      
      // 3. Gerar sugest√µes baseadas no contexto e protocolos
      const suggestions = await this.generateContextualSuggestions(
        context,
        contextAnalysis,
        relevantProtocols
      );

      // 4. Filtrar e priorizar sugest√µes
      const filteredSuggestions = this.filterAndPrioritizeSuggestions(suggestions, context);

      // 5. Salvar sugest√µes no banco de dados
      const savedSuggestions = await this.saveSuggestions(filteredSuggestions, context.sessionId);

      // 6. Atualizar cache e hist√≥rico
      this.updateCache(context.sessionId, contextAnalysis, savedSuggestions);
      this.lastSuggestionTime.set(context.sessionId, now);

      const result: SuggestionGenerationResult = {
        suggestions: savedSuggestions,
        clinical_insights: this.extractClinicalInsights(contextAnalysis),
        red_flags: this.extractRedFlags(contextAnalysis),
        context_analysis: contextAnalysis
      };

      // Emitir evento para notificar frontend via WebSocket
      this.emit('suggestions:generated', {
        sessionId: context.sessionId,
        suggestions: savedSuggestions,
        context: contextAnalysis
      });

      // Notificar via WebSocket se dispon√≠vel
      await this.notifyWebSocket(context.sessionId, savedSuggestions, contextAnalysis);

      console.log(`‚úÖ ${savedSuggestions.length} sugest√µes geradas para sess√£o ${context.sessionId}`);
      return result;

    } catch (error) {
      console.error('‚ùå Erro ao gerar sugest√µes:', error);
      return null;
    }
  }

  /**
   * Analisa o contexto atual da conversa
   */
  private async analyzeContext(context: ConversationContext): Promise<ContextAnalysis> {
    try {
      const prompt = PromptTemplate.generateContextPrompt({
        patientName: context.patientName,
        patientAge: context.patientAge,
        patientGender: context.patientGender,
        sessionDuration: context.sessionDuration,
        consultationType: context.consultationType,
        utterances: context.utterances.slice(-this.CONTEXT_WINDOW_SIZE)
      });

      const response = await makeChatCompletion([
        {
          role: 'system',
          content: 'Voc√™ √© um assistente m√©dico especializado em an√°lise de consultas cl√≠nicas. Responda APENAS com JSON v√°lido, sem markdown, sem ```json, sem texto adicional.'
        },
        {
          role: 'user',
          content: prompt
        }
      ]);

      const firstChoice = 'choices' in response ? response.choices[0] : undefined;
      let content = firstChoice?.message?.content || '{}';
      
      // Limpar markdown se presente
      if (content.includes('```json')) {
        content = content.replace(/```json\s*/, '').replace(/```\s*$/, '');
      }
      if (content.includes('```')) {
        content = content.replace(/```\s*/, '').replace(/```\s*$/, '');
      }
      
      // Tentar extrair JSON se houver texto adicional
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        content = jsonMatch[0];
      }

      // Validar e corrigir JSON
      let analysis;
      try {
        analysis = JSON.parse(content);
      } catch (parseError) {
        const err = parseError as Error;
        console.warn('‚ö†Ô∏è JSON inv√°lido da IA, usando fallback:', err.message);
        console.warn('üìù Conte√∫do recebido:', content.substring(0, 200) + '...');
        
        // Fallback: an√°lise b√°sica baseada nos utterances
        analysis = {
          phase: 'anamnese',
          urgency_level: 'medium',
          symptoms: this.extractSymptomsFromUtterances(context.utterances),
          patient_concerns: this.extractConcernsFromUtterances(context.utterances),
          clinical_notes: 'An√°lise autom√°tica baseada na transcri√ß√£o'
        };
      }
      
      // Validar estrutura da resposta
      if (!analysis.phase || !analysis.symptoms) {
        throw new Error('Resposta de an√°lise de contexto inv√°lida');
      }

      return analysis as ContextAnalysis;

    } catch (error) {
      console.error('‚ùå Erro na an√°lise de contexto:', error);
      // Retornar an√°lise padr√£o em caso de erro
      return {
        phase: 'anamnese',
        symptoms: [],
        urgency_level: 'baixa',
        next_steps: [],
        missing_info: [],
        patient_concerns: [],
        doctor_questions_asked: [],
        clinical_notes: 'An√°lise de contexto indispon√≠vel'
      };
    }
  }

  /**
   * Extrai sintomas dos utterances usando an√°lise simples
   */
  private extractSymptomsFromUtterances(utterances: any[]): string[] {
    const symptoms: string[] = [];
    const symptomPatterns = {
      'dor': ['dor', 'd√≥i', 'dolorido', 'dolorida', 'dores'],
      'peito': ['peito', 't√≥rax', 'cora√ß√£o', 'card√≠aco'],
      'cabe√ßa': ['cabe√ßa', 'cranio', 'cefal√©ia', 'enxaqueca'],
      'respira√ß√£o': ['respira√ß√£o', 'respirar', 'respirat√≥rio'],
      'falta de ar': ['falta de ar', 'dispneia', 'sufocando', 'sufoco'],
      'febre': ['febre', 'temperatura', 'calor', 'quente'],
      'n√°usea': ['n√°usea', 'enjoo', 'enjoado', 'enjoada'],
      'v√¥mito': ['v√¥mito', 'vomitar', 'vomitando'],
      'tosse': ['tosse', 'tossindo', 'tossir'],
      'tontura': ['tontura', 'tonto', 'tonta', 'vertigem'],
      'desmaio': ['desmaio', 'desmaiar', 'desmaiando'],
      'palpita√ß√£o': ['palpita√ß√£o', 'batimento', 'cora√ß√£o acelerado'],
      'ansiedade': ['ansiedade', 'ansioso', 'ansiosa', 'nervoso', 'nervosa'],
      'depress√£o': ['depress√£o', 'deprimido', 'deprimida', 'tristeza'],
      'ins√¥nia': ['ins√¥nia', 'insone', 'dormir', 'sono'],
      'fadiga': ['fadiga', 'cansa√ßo', 'cansado', 'cansada', 'fraco', 'fraca'],
      'diarreia': ['diarreia', 'diarr√©ia', 'evacua√ß√£o', 'coc√¥'],
      'est√¥mago': ['est√¥mago', 'barriga', 'abd√¥men', 'g√°strico']
    };

    utterances.forEach(utterance => {
      if (utterance.speaker === 'patient') {
        const text = utterance.text.toLowerCase();
        
        // Buscar padr√µes de sintomas
        Object.entries(symptomPatterns).forEach(([symptom, patterns]) => {
          const found = patterns.some(pattern => text.includes(pattern));
          if (found && !symptoms.includes(symptom)) {
            symptoms.push(symptom);
          }
        });
      }
    });

    return symptoms;
  }

  /**
   * Extrai preocupa√ß√µes do paciente dos utterances
   */
  private extractConcernsFromUtterances(utterances: any[]): string[] {
    const concerns: string[] = [];
    
    utterances.forEach(utterance => {
      if (utterance.speaker === 'patient') {
        // Extrair frases que indicam preocupa√ß√£o
        const text = utterance.text.toLowerCase();
        if (text.includes('preocupado') || text.includes('medo') || text.includes('ansioso')) {
          concerns.push(utterance.text);
        }
      }
    });

    return concerns;
  }

  /**
   * Gera sugest√µes b√°sicas quando a IA falha
   */
  private generateFallbackSuggestions(contextAnalysis: ContextAnalysis): any[] {
    const suggestions = [];
    const symptoms = contextAnalysis.symptoms;
    const concerns = contextAnalysis.patient_concerns;
    const phase = contextAnalysis.phase;

    // Sugest√µes baseadas nos sintomas detectados com varia√ß√µes
    if (symptoms.includes('dor')) {
      const painQuestions = [
        'Voc√™ pode descrever melhor a dor? Onde exatamente d√≥i?',
        'Como voc√™ classificaria a intensidade da dor de 0 a 10?',
        'A dor √© constante ou vem em ondas?',
        'Voc√™ j√° sentiu essa dor antes?',
        'A dor melhora ou piora com alguma posi√ß√£o?'
      ];
      suggestions.push({
        type: 'question',
        content: this.getRandomSuggestion(painQuestions),
        source: 'Protocolo de Avalia√ß√£o de Dor',
        confidence: 0.9,
        priority: 'high'
      });
    }

    if (symptoms.includes('peito')) {
      const chestQuestions = [
        'A dor no peito irradia para algum lugar? Bra√ßo, pesco√ßo, mand√≠bula?',
        'Voc√™ sente press√£o ou aperto no peito?',
        'A dor no peito piora com esfor√ßo f√≠sico?',
        'Voc√™ tem hist√≥rico de problemas card√≠acos na fam√≠lia?',
        'Voc√™ sente palpita√ß√µes ou batimentos irregulares?'
      ];
      suggestions.push({
        type: 'question',
        content: this.getRandomSuggestion(chestQuestions),
        source: 'Protocolo Cardiovascular',
        confidence: 0.9,
        priority: 'critical'
      });
    }

    if (symptoms.includes('respira√ß√£o') || symptoms.includes('falta de ar')) {
      const breathingQuestions = [
        'Voc√™ sente falta de ar em repouso ou apenas com esfor√ßo?',
        'Voc√™ tem tosse? Se sim, √© seca ou com catarro?',
        'Voc√™ j√° teve problemas respirat√≥rios antes?',
        'Voc√™ fuma ou j√° fumou?',
        'Voc√™ sente chiado no peito?'
      ];
      suggestions.push({
        type: 'question',
        content: this.getRandomSuggestion(breathingQuestions),
        source: 'Protocolo Respirat√≥rio',
        confidence: 0.9,
        priority: 'high'
      });
    }

    if (symptoms.includes('cabe√ßa')) {
      const headacheQuestions = [
        'Como voc√™ descreveria a dor de cabe√ßa? Latejante, press√£o, pontada?',
        'A dor de cabe√ßa √© acompanhada de n√°usea ou v√¥mito?',
        'Voc√™ tem sensibilidade √† luz ou ao barulho?',
        'Voc√™ j√° teve esse tipo de dor de cabe√ßa antes?',
        'A dor de cabe√ßa come√ßou de repente ou gradualmente?'
      ];
      suggestions.push({
        type: 'question',
        content: this.getRandomSuggestion(headacheQuestions),
        source: 'Protocolo Neurol√≥gico',
        confidence: 0.9,
        priority: 'high'
      });
    }

    if (symptoms.includes('febre')) {
      const feverQuestions = [
        'Voc√™ mediu a temperatura? Qual foi a temperatura mais alta?',
        'A febre √© acompanhada de calafrios ou suor?',
        'Voc√™ tem outros sintomas al√©m da febre?',
        'A febre come√ßou quando?',
        'Voc√™ tomou algum medicamento para a febre?'
      ];
      suggestions.push({
        type: 'question',
        content: this.getRandomSuggestion(feverQuestions),
        source: 'Protocolo de Febre',
        confidence: 0.9,
        priority: 'high'
      });
    }

    if (symptoms.includes('est√¥mago')) {
      const stomachQuestions = [
        'Voc√™ pode descrever a dor no est√¥mago? √â queima√ß√£o, c√≥lica ou pontada?',
        'A dor no est√¥mago melhora ou piora com a alimenta√ß√£o?',
        'Voc√™ tem n√°usea ou v√¥mito?',
        'Voc√™ notou alguma mudan√ßa no apetite?',
        'Voc√™ tem hist√≥rico de problemas g√°stricos?',
        'Voc√™ toma algum medicamento para o est√¥mago?'
      ];
      suggestions.push({
        type: 'question',
        content: this.getRandomSuggestion(stomachQuestions),
        source: 'Protocolo Gastrointestinal',
        confidence: 0.9,
        priority: 'high'
      });
    }

    if (symptoms.includes('diarreia')) {
      const diarrheaQuestions = [
        'H√° quanto tempo voc√™ est√° com diarreia?',
        'Quantas evacua√ß√µes voc√™ tem por dia?',
        'A diarreia √© acompanhada de sangue ou muco?',
        'Voc√™ tem dor abdominal junto com a diarreia?',
        'Voc√™ tem febre junto com a diarreia?',
        'Voc√™ viajou recentemente ou comeu algo diferente?'
      ];
      suggestions.push({
        type: 'question',
        content: this.getRandomSuggestion(diarrheaQuestions),
        source: 'Protocolo Gastrointestinal',
        confidence: 0.9,
        priority: 'high'
      });
    }

    // Sugest√µes baseadas na fase da consulta
    if (phase === 'anamnese' && suggestions.length < 3) {
      const anamnesisQuestions = [
        'Voc√™ pode me contar mais sobre o que est√° sentindo?',
        'Quando os sintomas come√ßaram?',
        'Voc√™ j√° teve sintomas similares antes?',
        'Voc√™ est√° tomando algum medicamento atualmente?',
        'Voc√™ tem alguma alergia conhecida?',
        'Como est√° seu apetite e sono?',
        'Voc√™ tem hist√≥rico de doen√ßas na fam√≠lia?'
      ];
      suggestions.push({
        type: 'question',
        content: this.getRandomSuggestion(anamnesisQuestions),
        source: 'Protocolo de Anamnese',
        confidence: 0.8,
        priority: 'medium'
      });
    }

    if (phase === 'exame_fisico' && suggestions.length < 3) {
      const examQuestions = [
        'Vou examinar voc√™ agora. Voc√™ tem alguma √°rea espec√≠fica que d√≥i mais?',
        'Voc√™ pode me mostrar onde exatamente sente a dor?',
        'A dor piora quando pressiono aqui?',
        'Voc√™ consegue fazer movimentos normais?',
        'Vou verificar seus sinais vitais agora.'
      ];
      suggestions.push({
        type: 'question',
        content: this.getRandomSuggestion(examQuestions),
        source: 'Protocolo de Exame F√≠sico',
        confidence: 0.8,
        priority: 'medium'
      });
    }

    // Sugest√µes gerais se n√£o h√° sintomas espec√≠ficos ou poucas sugest√µes
    if (suggestions.length === 0) {
      const generalQuestions = [
        'Voc√™ pode me contar mais sobre o que est√° sentindo?',
        'Como posso ajud√°-lo hoje?',
        'Voc√™ tem alguma preocupa√ß√£o espec√≠fica?',
        'Quando foi a √∫ltima vez que voc√™ se sentiu bem?',
        'Voc√™ notou alguma mudan√ßa recente em sua sa√∫de?'
      ];
      suggestions.push({
        type: 'question',
        content: this.getRandomSuggestion(generalQuestions),
        source: 'Protocolo de Anamnese',
        confidence: 0.8,
        priority: 'medium'
      });
    }

    // Adicionar sugest√µes de acompanhamento se j√° temos algumas
    if (suggestions.length > 0 && suggestions.length < 4) {
      const followUpQuestions = [
        'Voc√™ tem mais algum sintoma que gostaria de mencionar?',
        'H√° algo mais que voc√™ gostaria de me contar?',
        'Voc√™ tem alguma d√∫vida sobre seus sintomas?',
        'Como isso est√° afetando seu dia a dia?'
      ];
      suggestions.push({
        type: 'question',
        content: this.getRandomSuggestion(followUpQuestions),
        source: 'Protocolo de Acompanhamento',
        confidence: 0.7,
        priority: 'low'
      });
    }

    // Limitar a 4 sugest√µes e embaralhar
    return this.shuffleArray(suggestions).slice(0, 4);
  }

  /**
   * Seleciona uma sugest√£o aleat√≥ria de uma lista
   */
  private getRandomSuggestion(suggestions: string[]): string {
    return suggestions[Math.floor(Math.random() * suggestions.length)];
  }

  /**
   * Embaralha um array
   */
  private shuffleArray(array: any[]): any[] {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  /**
   * Gera sugest√µes de emerg√™ncia quando a IA falha
   */
  private generateEmergencyFallbackSuggestions(contextAnalysis: ContextAnalysis): any[] {
    const suggestions = [];

    if (contextAnalysis.symptoms.includes('peito')) {
      suggestions.push({
        type: 'warning',
        content: '‚ö†Ô∏è Dor no peito pode indicar emerg√™ncia cardiovascular. Avalie sinais vitais imediatamente.',
        source: 'Protocolo de Emerg√™ncia Cardiovascular',
        confidence: 1.0
      });
    }

    if (contextAnalysis.symptoms.includes('respira√ß√£o') || contextAnalysis.symptoms.includes('falta de ar')) {
      suggestions.push({
        type: 'warning',
        content: '‚ö†Ô∏è Dispneia pode indicar emerg√™ncia respirat√≥ria. Monitore satura√ß√£o de oxig√™nio.',
        source: 'Protocolo de Emerg√™ncia Respirat√≥ria',
        confidence: 1.0
      });
    }

    return suggestions;
  }

  /**
   * Busca protocolos m√©dicos relevantes usando busca simples
   */
  private async findRelevantProtocols(contextAnalysis: ContextAnalysis): Promise<any[]> {
    try {
      // Por enquanto, retornar protocolos b√°sicos baseados nos sintomas
      const basicProtocols = [
        {
          id: 'protocol-1',
          title: 'Protocolo de Anamnese - Cl√≠nica Geral',
          source: 'Manual de Procedimentos Cl√≠nicos',
          content: 'PROTOCOLO DE ANAMNESE - CL√çNICA GERAL\n\n1. IDENTIFICA√á√ÉO DO PACIENTE\n2. QUEIXA PRINCIPAL\n3. HIST√ìRIA DA DOEN√áA ATUAL\n4. SINTOMAS ASSOCIADOS\n5. HIST√ìRIA PATOL√ìGICA PREGRESSA\n6. MEDICA√á√ïES EM USO\n7. HIST√ìRIA FAMILIAR\n8. HIST√ìRIA SOCIAL'
        },
        {
          id: 'protocol-2',
          title: 'Perguntas Padronizadas - Dor',
          source: 'Guia de Consulta Cl√≠nica',
          content: 'PERGUNTAS PADRONIZADAS PARA AVALIA√á√ÉO DE DOR\n\n1. LOCALIZA√á√ÉO\n2. CARACTER√çSTICAS\n3. INTENSIDADE\n4. DURA√á√ÉO E EVOLU√á√ÉO\n5. FATORES DESENCADEANTES\n6. SINTOMAS ASSOCIADOS\n7. TRATAMENTOS PR√âVIOS'
        }
      ];

      // Filtrar protocolos baseados nos sintomas mencionados
      const relevantProtocols = basicProtocols.filter(protocol => {
        const symptoms = contextAnalysis.symptoms.join(' ').toLowerCase();
        const protocolContent = protocol.content.toLowerCase();
        
        // Buscar palavras-chave relacionadas aos sintomas
        const keywords = ['dor', 'peito', 'cabe√ßa', 'respira√ß√£o', 'febre', 'n√°usea'];
        return keywords.some(keyword => 
          symptoms.includes(keyword) && protocolContent.includes(keyword)
        );
      });

      console.log(`üìö ${relevantProtocols.length} protocolos relevantes encontrados`);
      return relevantProtocols;

    } catch (error) {
      console.error('‚ùå Erro na busca de protocolos:', error);
      return [];
    }
  }

  /**
   * Gera sugest√µes contextualizadas
   */
  private async generateContextualSuggestions(
    context: ConversationContext,
    contextAnalysis: ContextAnalysis,
    relevantProtocols: any[]
  ): Promise<AISuggestion[]> {
    try {
      // Determinar se √© situa√ß√£o de emerg√™ncia
      if (contextAnalysis.urgency_level === 'critica') {
        return await this.generateEmergencySuggestions(contextAnalysis);
      }

      // Gerar sugest√µes normais
      const prompt = PromptTemplate.generateSuggestionPrompt({
        contextAnalysis,
        relevantProtocols,
        alreadyAskedQuestions: contextAnalysis.doctor_questions_asked,
        currentPhase: contextAnalysis.phase,
        urgencyLevel: contextAnalysis.urgency_level,
        mentionedSymptoms: contextAnalysis.symptoms
      });

      const response = await makeChatCompletion([
        {
          role: 'system',
          content: 'Voc√™ √© um m√©dico experiente auxiliando um colega. Responda APENAS com JSON v√°lido, sem markdown, sem ```json, sem texto adicional.'
        },
        {
          role: 'user',
          content: prompt
        }
      ]);

      const firstChoice = 'choices' in response ? response.choices[0] : undefined;
      let content = firstChoice?.message?.content || '{}';
      
      // Limpar markdown se presente
      if (content.includes('```json')) {
        content = content.replace(/```json\s*/, '').replace(/```\s*$/, '');
      }
      if (content.includes('```')) {
        content = content.replace(/```\s*/, '').replace(/```\s*$/, '');
      }
      
      // Tentar extrair JSON se houver texto adicional
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        content = jsonMatch[0];
      }

      // Validar e corrigir JSON
      let result;
      try {
        result = JSON.parse(content);
      } catch (parseError) {
        const err = parseError as Error;
        console.warn('‚ö†Ô∏è JSON inv√°lido na gera√ß√£o de sugest√µes, usando fallback:', err.message);
        console.warn('üìù Conte√∫do recebido:', content.substring(0, 500) + '...');
        
        // Tentar corrigir JSON comum
        try {
          // Corrigir v√≠rgulas finais em arrays
          content = content.replace(/,(\s*[}\]])/g, '$1');
          // Corrigir v√≠rgulas duplas
          content = content.replace(/,+/g, ',');
          result = JSON.parse(content);
          console.log('‚úÖ JSON corrigido com sucesso');
        } catch (secondError) {
          console.warn('‚ö†Ô∏è Falha na corre√ß√£o do JSON, usando fallback');
          
          // Fallback: sugest√µes b√°sicas baseadas no contexto
          result = {
            suggestions: this.generateFallbackSuggestions(contextAnalysis)
          };
        }
      }
      
      // Converter para formato AISuggestion
      const suggestions: AISuggestion[] = (result.suggestions || []).map((s: any) => ({
        id: randomUUID(),
        session_id: context.sessionId,
        type: s.type,
        content: s.content,
        source: s.source,
        confidence: s.confidence || 0.8,
        priority: s.priority || 'medium',
        used: false,
        rag_context: relevantProtocols,
        created_at: new Date().toISOString()
      }));

      return suggestions;

    } catch (error) {
      console.error('‚ùå Erro ao gerar sugest√µes contextualizadas:', error);
      return [];
    }
  }

  /**
   * Gera sugest√µes para situa√ß√µes de emerg√™ncia
   */
  private async generateEmergencySuggestions(contextAnalysis: ContextAnalysis): Promise<AISuggestion[]> {
    const prompt = PromptTemplate.generateEmergencyPrompt({
      criticalSymptoms: contextAnalysis.symptoms
    });

    try {
      const response = await makeChatCompletion([
        {
          role: 'system',
          content: 'Voc√™ √© um m√©dico de emerg√™ncia. Responda APENAS com JSON v√°lido, sem markdown, sem ```json, sem texto adicional.'
        },
        {
          role: 'user',
          content: prompt
        }
      ]);

      const firstChoice = 'choices' in response ? response.choices[0] : undefined;
      let content = firstChoice?.message?.content || '{}';
      
      // Limpar markdown se presente
      if (content.includes('```json')) {
        content = content.replace(/```json\s*/, '').replace(/```\s*$/, '');
      }
      if (content.includes('```')) {
        content = content.replace(/```\s*/, '').replace(/```\s*$/, '');
      }
      
      // Tentar extrair JSON se houver texto adicional
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        content = jsonMatch[0];
      }

      // Validar e corrigir JSON
      let result;
      try {
        result = JSON.parse(content);
      } catch (parseError) {
        const err = parseError as Error;
        console.warn('‚ö†Ô∏è JSON inv√°lido nas sugest√µes de emerg√™ncia, usando fallback:', err.message);
        console.warn('üìù Conte√∫do recebido:', content.substring(0, 200) + '...');
        
        // Fallback: sugest√µes b√°sicas de emerg√™ncia
        result = {
          emergency_suggestions: this.generateEmergencyFallbackSuggestions(contextAnalysis)
        };
      }
      
      return (result.emergency_suggestions || []).map((s: any) => ({
        id: randomUUID(),
        session_id: '', // Ser√° preenchido pelo caller
        type: s.type,
        content: s.content,
        source: s.source,
        confidence: s.confidence || 1.0,
        priority: 'critical',
        used: false,
        created_at: new Date().toISOString()
      }));

    } catch (error) {
      console.error('‚ùå Erro ao gerar sugest√µes de emerg√™ncia:', error);
      return [];
    }
  }

  /**
   * Filtra e prioriza sugest√µes
   */
  private filterAndPrioritizeSuggestions(
    suggestions: AISuggestion[],
    context: ConversationContext
  ): AISuggestion[] {
    return suggestions
      .filter(s => s.confidence >= this.CONFIDENCE_THRESHOLD)
      .sort((a, b) => {
        // Priorizar por n√≠vel de prioridade
        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
        const aPriority = priorityOrder[a.priority] || 2;
        const bPriority = priorityOrder[b.priority] || 2;
        
        if (aPriority !== bPriority) {
          return bPriority - aPriority;
        }
        
        // Em caso de empate, priorizar por confian√ßa
        return b.confidence - a.confidence;
      })
      .slice(0, 5); // M√°ximo 5 sugest√µes por vez
  }

  /**
   * Salva sugest√µes no banco de dados
   */
  private async saveSuggestions(suggestions: AISuggestion[], sessionId: string): Promise<AISuggestion[]> {
    const savedSuggestions: AISuggestion[] = [];

    for (const suggestion of suggestions) {
      try {
        const saved = await db.createSuggestion({
          ...suggestion,
          session_id: sessionId
        });

        if (saved) {
          // Normalize to AISuggestion shape (confidence/priority required)
          const normalized: AISuggestion = {
            id: saved.id,
            session_id: saved.session_id,
            utterance_id: (saved as any).utterance_id,
            type: saved.type as AISuggestion['type'],
            content: saved.content,
            source: saved.source,
            source_section: (saved as any).source_section,
            confidence: (saved as any).confidence ?? 0.8,
            priority: (saved as any).priority ?? 'medium',
            used: saved.used,
            used_at: (saved as any).used_at,
            used_by: (saved as any).used_by,
            rag_context: (saved as any).rag_context,
            created_at: saved.created_at,
          };

          savedSuggestions.push(normalized);
        }
      } catch (error) {
        console.error('‚ùå Erro ao salvar sugest√£o:', error);
      }
    }

    return savedSuggestions;
  }

  /**
   * Atualiza cache interno
   */
  private updateCache(sessionId: string, contextAnalysis: ContextAnalysis, suggestions: AISuggestion[]): void {
    this.contextCache.set(sessionId, contextAnalysis);
    
    const existingSuggestions = this.suggestionHistory.get(sessionId) || [];
    this.suggestionHistory.set(sessionId, [...existingSuggestions, ...suggestions]);
  }

  /**
   * Extrai insights cl√≠nicos do contexto
   */
  private extractClinicalInsights(contextAnalysis: ContextAnalysis): string[] {
    const insights: string[] = [];

    if (contextAnalysis.symptoms.length > 0) {
      insights.push(`Sintomas identificados: ${contextAnalysis.symptoms.join(', ')}`);
    }

    if (contextAnalysis.missing_info.length > 0) {
      insights.push(`Informa√ß√µes em falta: ${contextAnalysis.missing_info.join(', ')}`);
    }

    if (contextAnalysis.clinical_notes) {
      insights.push(`Observa√ß√µes cl√≠nicas: ${contextAnalysis.clinical_notes}`);
    }

    return insights;
  }

  /**
   * Extrai sinais de alerta do contexto
   */
  private extractRedFlags(contextAnalysis: ContextAnalysis): string[] {
    const redFlags: string[] = [];

    if (contextAnalysis.urgency_level === 'critica') {
      redFlags.push('Situa√ß√£o cr√≠tica detectada - requer aten√ß√£o imediata');
    }

    if (contextAnalysis.urgency_level === 'alta') {
      redFlags.push('Sintomas de alta urg√™ncia identificados');
    }

    // Adicionar mais l√≥gica de detec√ß√£o de red flags baseada nos sintomas
    const criticalSymptoms = ['dor tor√°cica', 'falta de ar', 'perda de consci√™ncia', 'sangramento'];
    const mentionedCriticalSymptoms = contextAnalysis.symptoms.filter(symptom => 
      criticalSymptoms.some(critical => symptom.toLowerCase().includes(critical))
    );

    if (mentionedCriticalSymptoms.length > 0) {
      redFlags.push(`Sintomas cr√≠ticos mencionados: ${mentionedCriticalSymptoms.join(', ')}`);
    }

    return redFlags;
  }

  /**
   * Gera sugest√µes mock para desenvolvimento/teste
   */
  private generateMockSuggestions(context: ConversationContext): SuggestionGenerationResult {
    const mockSuggestions: AISuggestion[] = [
      {
        id: randomUUID(),
        session_id: context.sessionId,
        type: 'question',
        content: 'Como voc√™ descreveria a intensidade da dor?',
        source: 'Protocolo Mock',
        confidence: 0.85,
        priority: 'medium',
        used: false,
        created_at: new Date().toISOString()
      },
      {
        id: randomUUID(),
        session_id: context.sessionId,
        type: 'assessment',
        content: 'H√° quanto tempo voc√™ est√° com esses sintomas?',
        source: 'Protocolo Mock',
        confidence: 0.9,
        priority: 'high',
        used: false,
        created_at: new Date().toISOString()
      }
    ];

    return {
      suggestions: mockSuggestions,
      clinical_insights: ['An√°lise mock ativa'],
      red_flags: [],
      context_analysis: {
        phase: 'anamnese',
        symptoms: ['dor'],
        urgency_level: 'media',
        next_steps: ['continuar anamnese'],
        missing_info: ['dura√ß√£o dos sintomas'],
        patient_concerns: ['dor'],
        doctor_questions_asked: [],
        clinical_notes: 'Modo mock ativo'
      }
    };
  }

  /**
   * Marca uma sugest√£o como usada
   */
  public async markSuggestionAsUsed(suggestionId: string, userId: string): Promise<boolean> {
    try {
      const success = await db.markSuggestionAsUsed(suggestionId);
      
      if (success) {
        this.emit('suggestion:used', {
          suggestionId,
          userId,
          timestamp: new Date().toISOString()
        });
      }

      return success;
    } catch (error) {
      console.error('‚ùå Erro ao marcar sugest√£o como usada:', error);
      return false;
    }
  }

  /**
   * Obt√©m sugest√µes existentes de uma sess√£o
   */
  public async getSessionSuggestions(sessionId: string): Promise<AISuggestion[]> {
    try {
      const rows = await db.getSessionSuggestions(sessionId);
      return rows.map((s: any) => ({
        id: s.id,
        session_id: s.session_id,
        utterance_id: s.utterance_id,
        type: s.type as AISuggestion['type'],
        content: s.content,
        source: s.source,
        source_section: s.source_section,
        confidence: s.confidence ?? 0.8,
        priority: s.priority ?? 'medium',
        used: s.used,
        used_at: s.used_at,
        used_by: s.used_by,
        rag_context: s.rag_context,
        created_at: s.created_at,
      }));
    } catch (error) {
      console.error('‚ùå Erro ao obter sugest√µes da sess√£o:', error);
      return [];
    }
  }

  /**
   * Limpa cache de uma sess√£o
   */
  public clearSessionCache(sessionId: string): void {
    this.contextCache.delete(sessionId);
    this.suggestionHistory.delete(sessionId);
    this.lastSuggestionTime.delete(sessionId);
  }

  /**
   * Notifica via WebSocket (se dispon√≠vel)
   */
  private async notifyWebSocket(sessionId: string, suggestions: AISuggestion[], contextAnalysis: ContextAnalysis): Promise<void> {
    try {
      // Tentar obter inst√¢ncia do WebSocket notifier
      const { SessionNotifier } = await import('../websocket/index');
      
      // Esta √© uma implementa√ß√£o simplificada - em produ√ß√£o, voc√™ teria uma refer√™ncia global ao notifier
      console.log(`üì° WebSocket notification preparada para sess√£o ${sessionId}: ${suggestions.length} sugest√µes`);
      
    } catch (error) {
      // WebSocket n√£o dispon√≠vel - n√£o √© cr√≠tico
      console.log('üì° WebSocket notifier n√£o dispon√≠vel - sugest√µes salvas no banco');
    }
  }

  /**
   * Obt√©m estat√≠sticas do servi√ßo
   */
  public getServiceStats(): any {
    return {
      isEnabled: this.isEnabled,
      activeSessions: this.contextCache.size,
      totalSuggestions: Array.from(this.suggestionHistory.values()).reduce(
        (total, suggestions) => total + suggestions.length, 0
      ),
      config: {
        minSuggestionInterval: this.MIN_SUGGESTION_INTERVAL,
        maxSuggestionsPerSession: this.MAX_SUGGESTIONS_PER_SESSION,
        contextWindowSize: this.CONTEXT_WINDOW_SIZE,
        confidenceThreshold: this.CONFIDENCE_THRESHOLD
      }
    };
  }
}

// Inst√¢ncia singleton do servi√ßo
export const suggestionService = new SuggestionService();
export default suggestionService;
