import { RoomServiceClient, AccessToken, DataPacket_Kind } from 'livekit-server-sdk';
import { EventEmitter } from 'events';
import { transcriptionService } from './transcriptionService';
import { config } from '../config';

interface LiveKitTranscriptionConfig {
  roomName: string;
  consultationId: string;
  participantId: string;
  participantName: string;
}

export class LiveKitTranscriptionService extends EventEmitter {
  private livekitClient: RoomServiceClient;
  private activeRooms: Map<string, LiveKitTranscriptionConfig> = new Map();

  constructor() {
    super();
    
    this.livekitClient = new RoomServiceClient(
      config.LIVEKIT_URL,
      config.LIVEKIT_API_KEY,
      config.LIVEKIT_API_SECRET
    );

    console.log('üé§ LiveKit Transcription Service inicializado');
  }

  /**
   * Iniciar transcri√ß√£o para uma sala LiveKit
   */
  async startTranscription(config: LiveKitTranscriptionConfig): Promise<void> {
    try {
      const { roomName, consultationId, participantId, participantName } = config;
      
      console.log(`üé§ Iniciando transcri√ß√£o LiveKit para sala: ${roomName}`);
      
      // Verificar se a sala existe
      const rooms = await this.livekitClient.listRooms();
      const room = rooms.find(r => r.name === roomName);
      
      if (!room) {
        console.log(`‚ö†Ô∏è Sala ${roomName} n√£o encontrada, mas continuando...`);
      }

      // Registrar configura√ß√£o da sala
      this.activeRooms.set(roomName, config);

      // Iniciar transcri√ß√£o no TranscriptionService
      await transcriptionService.startTranscription(roomName, consultationId);

      console.log(`‚úÖ Transcri√ß√£o LiveKit iniciada para sala: ${roomName}`);
      
    } catch (error) {
      console.error('‚ùå Erro ao iniciar transcri√ß√£o LiveKit:', error);
      throw error;
    }
  }

  /**
   * Parar transcri√ß√£o para uma sala LiveKit
   */
  async stopTranscription(roomName: string): Promise<void> {
    try {
      console.log(`üõë Parando transcri√ß√£o LiveKit para sala: ${roomName}`);
      
      // Parar transcri√ß√£o no TranscriptionService
      await transcriptionService.stopTranscription(roomName);
      
      // Remover configura√ß√£o
      this.activeRooms.delete(roomName);
      
      console.log(`‚úÖ Transcri√ß√£o LiveKit parada para sala: ${roomName}`);
      
    } catch (error) {
      console.error('‚ùå Erro ao parar transcri√ß√£o LiveKit:', error);
      throw error;
    }
  }

  /**
   * Processar √°udio recebido do LiveKit
   */
  async processLiveKitAudio(audioData: Buffer, participantId: string, roomName: string): Promise<void> {
    try {
      const config = this.activeRooms.get(roomName);
      if (!config) {
        console.warn(`‚ö†Ô∏è Configura√ß√£o n√£o encontrada para sala: ${roomName}`);
        return;
      }

      // Converter √°udio para formato esperado pelo TranscriptionService
      const audioChunk = {
        data: audioData,
        participantId,
        sampleRate: 16000, // LiveKit usa 16kHz por padr√£o
        channels: 1
      };

      // Processar √°udio
      await transcriptionService.processAudioChunk(audioChunk, roomName);
      
    } catch (error) {
      console.error('‚ùå Erro ao processar √°udio LiveKit:', error);
    }
  }

  /**
   * Obter estat√≠sticas de transcri√ß√£o
   */
  async getTranscriptionStats(roomName: string): Promise<any> {
    try {
      const config = this.activeRooms.get(roomName);
      if (!config) {
        return null;
      }

      const stats = await transcriptionService.getTranscriptionStats(roomName);

      return {
        roomName,
        isActive: this.activeRooms.has(roomName),
        isConnected: true, // Simplificado por enquanto
        participants: 0, // Ser√° implementado quando necess√°rio
        ...stats
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      return null;
    }
  }

  /**
   * Limpar recursos
   */
  async cleanup(): Promise<void> {
    try {
      console.log('üßπ Limpando recursos do LiveKit Transcription Service...');
      
      // Parar todas as transcri√ß√µes ativas
      for (const roomName of this.activeRooms.keys()) {
        await this.stopTranscription(roomName);
      }
      
      console.log('‚úÖ Recursos limpos');
      
    } catch (error) {
      console.error('‚ùå Erro ao limpar recursos:', error);
    }
  }
}

export const livekitTranscriptionService = new LiveKitTranscriptionService();
