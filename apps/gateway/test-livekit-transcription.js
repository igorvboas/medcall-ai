#!/usr/bin/env node

/**
 * Teste para verificar se a transcri√ß√£o LiveKit est√° funcionando
 * Execute com: node test-livekit-transcription.js
 */

const { io } = require('socket.io-client');

// Configura√ß√µes de teste
const GATEWAY_URL = process.env.GATEWAY_URL || 'http://localhost:3001';
const ROOM_NAME = 'test-room-' + Date.now();
const CONSULTATION_ID = 'test-consultation-' + Date.now();
const PARTICIPANT_ID = 'test-participant-' + Date.now();

console.log('üß™ Iniciando teste de transcri√ß√£o LiveKit...');
console.log('üìã Configura√ß√µes:', {
  GATEWAY_URL,
  ROOM_NAME,
  CONSULTATION_ID,
  PARTICIPANT_ID
});

// Conectar ao WebSocket
const socket = io(GATEWAY_URL, {
  transports: ['websocket'],
  autoConnect: true
});

socket.on('connect', () => {
  console.log('‚úÖ Conectado ao WebSocket');
  
  // Teste 1: Iniciar transcri√ß√£o
  console.log('üé§ Teste 1: Iniciando transcri√ß√£o...');
  socket.emit('online:start-transcription', {
    roomName: ROOM_NAME,
    consultationId: CONSULTATION_ID,
    participantId: PARTICIPANT_ID,
    participantName: 'Test Participant'
  });
});

socket.on('online:transcription-started', (data) => {
  console.log('‚úÖ Transcri√ß√£o iniciada:', data);
  
  // Teste 2: Obter estat√≠sticas
  console.log('üìä Teste 2: Obtendo estat√≠sticas...');
  socket.emit('online:transcription-stats', {
    roomName: ROOM_NAME
  });
});

socket.on('online:transcription-stats-response', (data) => {
  console.log('üìä Estat√≠sticas recebidas:', data);
  
  // Teste 3: Parar transcri√ß√£o ap√≥s 5 segundos
  setTimeout(() => {
    console.log('üõë Teste 3: Parando transcri√ß√£o...');
    socket.emit('online:stop-transcription', {
      roomName: ROOM_NAME,
      consultationId: CONSULTATION_ID
    });
  }, 5000);
});

socket.on('online:transcription-stopped', (data) => {
  console.log('‚úÖ Transcri√ß√£o parada:', data);
  
  // Teste conclu√≠do
  console.log('üéâ Todos os testes conclu√≠dos com sucesso!');
  process.exit(0);
});

socket.on('error', (data) => {
  console.error('‚ùå Erro recebido:', data);
});

socket.on('disconnect', () => {
  console.log('üîå Desconectado do WebSocket');
});

// Timeout de seguran√ßa
setTimeout(() => {
  console.error('‚è∞ Timeout: Teste n√£o conclu√≠do em 30 segundos');
  process.exit(1);
}, 30000);

console.log('‚è≥ Aguardando conex√£o...');
